// Code generated by protoc-gen-go. DO NOT EDIT.
// source: grpc.proto

package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Status int32

const (
	Status_OK            Status = 0
	Status_UNIMPLEMENTED Status = 1
)

var Status_name = map[int32]string{
	0: "OK",
	1: "UNIMPLEMENTED",
}
var Status_value = map[string]int32{
	"OK":            0,
	"UNIMPLEMENTED": 1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}
func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_grpc_3eca42439c5932ef, []int{0}
}

type Empty struct {
	Error                Status   `protobuf:"varint,1,opt,name=error,proto3,enum=protobuf.Status" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_3eca42439c5932ef, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func (m *Empty) GetError() Status {
	if m != nil {
		return m.Error
	}
	return Status_OK
}

type List struct {
	Error                []Status               `protobuf:"varint,1,rep,packed,name=error,proto3,enum=protobuf.Status" json:"error,omitempty"`
	Ts                   []*timestamp.Timestamp `protobuf:"bytes,2,rep,name=ts,proto3" json:"ts,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *List) Reset()         { *m = List{} }
func (m *List) String() string { return proto.CompactTextString(m) }
func (*List) ProtoMessage()    {}
func (*List) Descriptor() ([]byte, []int) {
	return fileDescriptor_grpc_3eca42439c5932ef, []int{1}
}
func (m *List) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_List.Unmarshal(m, b)
}
func (m *List) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_List.Marshal(b, m, deterministic)
}
func (dst *List) XXX_Merge(src proto.Message) {
	xxx_messageInfo_List.Merge(dst, src)
}
func (m *List) XXX_Size() int {
	return xxx_messageInfo_List.Size(m)
}
func (m *List) XXX_DiscardUnknown() {
	xxx_messageInfo_List.DiscardUnknown(m)
}

var xxx_messageInfo_List proto.InternalMessageInfo

func (m *List) GetError() []Status {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *List) GetTs() []*timestamp.Timestamp {
	if m != nil {
		return m.Ts
	}
	return nil
}

func init() {
	proto.RegisterType((*Empty)(nil), "protobuf.Empty")
	proto.RegisterType((*List)(nil), "protobuf.List")
	proto.RegisterEnum("protobuf.Status", Status_name, Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PingServiceClient is the client API for PingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PingServiceClient interface {
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*timestamp.Timestamp, error)
	PingC(ctx context.Context, opts ...grpc.CallOption) (PingService_PingCClient, error)
	PingS(ctx context.Context, in *List, opts ...grpc.CallOption) (PingService_PingSClient, error)
	PingB(ctx context.Context, opts ...grpc.CallOption) (PingService_PingBClient, error)
}

type pingServiceClient struct {
	cc *grpc.ClientConn
}

func NewPingServiceClient(cc *grpc.ClientConn) PingServiceClient {
	return &pingServiceClient{cc}
}

func (c *pingServiceClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*timestamp.Timestamp, error) {
	out := new(timestamp.Timestamp)
	err := c.cc.Invoke(ctx, "/protobuf.PingService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pingServiceClient) PingC(ctx context.Context, opts ...grpc.CallOption) (PingService_PingCClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[0], "/protobuf.PingService/PingC", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingCClient{stream}
	return x, nil
}

type PingService_PingCClient interface {
	Send(*Empty) error
	CloseAndRecv() (*List, error)
	grpc.ClientStream
}

type pingServicePingCClient struct {
	grpc.ClientStream
}

func (x *pingServicePingCClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServicePingCClient) CloseAndRecv() (*List, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(List)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) PingS(ctx context.Context, in *List, opts ...grpc.CallOption) (PingService_PingSClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[1], "/protobuf.PingService/PingS", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingSClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PingService_PingSClient interface {
	Recv() (*timestamp.Timestamp, error)
	grpc.ClientStream
}

type pingServicePingSClient struct {
	grpc.ClientStream
}

func (x *pingServicePingSClient) Recv() (*timestamp.Timestamp, error) {
	m := new(timestamp.Timestamp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *pingServiceClient) PingB(ctx context.Context, opts ...grpc.CallOption) (PingService_PingBClient, error) {
	stream, err := c.cc.NewStream(ctx, &_PingService_serviceDesc.Streams[2], "/protobuf.PingService/PingB", opts...)
	if err != nil {
		return nil, err
	}
	x := &pingServicePingBClient{stream}
	return x, nil
}

type PingService_PingBClient interface {
	Send(*Empty) error
	Recv() (*timestamp.Timestamp, error)
	grpc.ClientStream
}

type pingServicePingBClient struct {
	grpc.ClientStream
}

func (x *pingServicePingBClient) Send(m *Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pingServicePingBClient) Recv() (*timestamp.Timestamp, error) {
	m := new(timestamp.Timestamp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PingServiceServer is the server API for PingService service.
type PingServiceServer interface {
	Ping(context.Context, *Empty) (*timestamp.Timestamp, error)
	PingC(PingService_PingCServer) error
	PingS(*List, PingService_PingSServer) error
	PingB(PingService_PingBServer) error
}

func RegisterPingServiceServer(s *grpc.Server, srv PingServiceServer) {
	s.RegisterService(&_PingService_serviceDesc, srv)
}

func _PingService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PingServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.PingService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PingServiceServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _PingService_PingC_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).PingC(&pingServicePingCServer{stream})
}

type PingService_PingCServer interface {
	SendAndClose(*List) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type pingServicePingCServer struct {
	grpc.ServerStream
}

func (x *pingServicePingCServer) SendAndClose(m *List) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServicePingCServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PingService_PingS_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(List)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PingServiceServer).PingS(m, &pingServicePingSServer{stream})
}

type PingService_PingSServer interface {
	Send(*timestamp.Timestamp) error
	grpc.ServerStream
}

type pingServicePingSServer struct {
	grpc.ServerStream
}

func (x *pingServicePingSServer) Send(m *timestamp.Timestamp) error {
	return x.ServerStream.SendMsg(m)
}

func _PingService_PingB_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PingServiceServer).PingB(&pingServicePingBServer{stream})
}

type PingService_PingBServer interface {
	Send(*timestamp.Timestamp) error
	Recv() (*Empty, error)
	grpc.ServerStream
}

type pingServicePingBServer struct {
	grpc.ServerStream
}

func (x *pingServicePingBServer) Send(m *timestamp.Timestamp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pingServicePingBServer) Recv() (*Empty, error) {
	m := new(Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.PingService",
	HandlerType: (*PingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _PingService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PingC",
			Handler:       _PingService_PingC_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "PingS",
			Handler:       _PingService_PingS_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PingB",
			Handler:       _PingService_PingB_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}

func init() { proto.RegisterFile("grpc.proto", fileDescriptor_grpc_3eca42439c5932ef) }

var fileDescriptor_grpc_3eca42439c5932ef = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x00, 0x53, 0x49, 0xa5, 0x69, 0x52, 0xf2, 0xe9,
	0xf9, 0xf9, 0xe9, 0x39, 0xa9, 0xfa, 0x30, 0x01, 0xfd, 0x92, 0xcc, 0xdc, 0xd4, 0xe2, 0x92, 0xc4,
	0xdc, 0x02, 0x88, 0x52, 0x25, 0x7d, 0x2e, 0x56, 0xd7, 0xdc, 0x82, 0x92, 0x4a, 0x21, 0x35, 0x2e,
	0xd6, 0xd4, 0xa2, 0xa2, 0xfc, 0x22, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x3e, 0x23, 0x01, 0x3d, 0x98,
	0x16, 0xbd, 0xe0, 0x92, 0xc4, 0x92, 0xd2, 0xe2, 0x20, 0x88, 0xb4, 0x52, 0x14, 0x17, 0x8b, 0x4f,
	0x66, 0x71, 0x09, 0xb2, 0x7a, 0x66, 0x3c, 0xea, 0x85, 0xb4, 0xb8, 0x98, 0x4a, 0x8a, 0x25, 0x98,
	0x14, 0x98, 0x35, 0xb8, 0x8d, 0xa4, 0xf4, 0x20, 0xce, 0x41, 0xa8, 0x0d, 0x81, 0x39, 0x27, 0x88,
	0xa9, 0xa4, 0x58, 0x4b, 0x99, 0x8b, 0x0d, 0xa2, 0x59, 0x88, 0x8d, 0x8b, 0xc9, 0xdf, 0x5b, 0x80,
	0x41, 0x48, 0x90, 0x8b, 0x37, 0xd4, 0xcf, 0xd3, 0x37, 0xc0, 0xc7, 0xd5, 0xd7, 0xd5, 0x2f, 0xc4,
	0xd5, 0x45, 0x80, 0xd1, 0xe8, 0x3e, 0x23, 0x17, 0x77, 0x40, 0x66, 0x5e, 0x7a, 0x70, 0x6a, 0x51,
	0x59, 0x66, 0x72, 0xaa, 0x90, 0x31, 0x17, 0x0b, 0x88, 0x2b, 0xc4, 0x8f, 0x30, 0x15, 0xec, 0x23,
	0x29, 0x3c, 0xb6, 0x09, 0x69, 0x71, 0xb1, 0x82, 0x34, 0x39, 0x63, 0xea, 0xe2, 0x43, 0x08, 0x80,
	0xfc, 0xa9, 0xc1, 0x28, 0x64, 0x0a, 0x51, 0x1b, 0x2c, 0x84, 0x26, 0x85, 0xcf, 0x02, 0x03, 0x46,
	0x21, 0x0b, 0x88, 0x36, 0x27, 0x92, 0x1c, 0xa6, 0xc1, 0x68, 0xc0, 0x98, 0xc4, 0x06, 0x16, 0x37,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xd2, 0x4b, 0xa8, 0x3f, 0xd3, 0x01, 0x00, 0x00,
}
